/*
 * generated by Xtext 2.17.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.seleniumDriver.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SeleniumDriverGenerator extends AbstractGenerator {

	private static int variableIt = 0;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (ts : resource.allContents.toIterable.filter(TestSuite)) {
			fsa.generateFile(FirstUpperCase(ts.suiteName)+"Test" + ".java", ts.generateTestSuite)
		}
	}
	
	def generateTestSuite(TestSuite ts) '''
	import java.util.List;
	import java.util.concurrent.TimeUnit;
		
	import org.openqa.selenium.support.ui.ExpectedConditions;
	import org.openqa.selenium.support.ui.WebDriverWait;
		
	import org.junit.Assert;  
	import org.openqa.selenium.*;
	import org.openqa.selenium.firefox.FirefoxDriver;
		
	public class «ts.suiteName.FirstUpperCase»Test {
	
		public static void main(String[] args) { 
			System.setProperty("webdriver.gecko.driver", "geckodriver");
			«FOR tc : ts.cases»
				«tc.caseName»();
			«ENDFOR»
						
		}
		
		«FOR tc : ts.cases»
		 	«tc.generateTestCaseBody»
		«ENDFOR»
		
	}
	'''

	def generateTestCaseBody(TestCase tc) {
		variableIt = 0
		
		return '''
		
	private static void «tc.caseName»() {
		boolean cookiesAlreadyChecked = false;
		WebDriver driver = new FirefoxDriver();
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		
		«FOR line : tc.lines»
			«IF line instanceof Action»
				«line.parseLigne»
			«ENDIF»
			«IF line instanceof VariableAssignation»
				«line.parseLigne»
			«ENDIF»
		«ENDFOR»
		System.out.println("SUCCESS !!!!!");
		driver.close();
	}
	'''
	}
	
	def parseLigne(VariableAssignation line){
		return getWebElementAttributeType(line.value)+" "+line.^var.name+" = "+findWebElement(line.value);
	}
	
	def getWebElementAttributeType(WebElement we){
		if(we.attribute !== null){
			if(we.type === "title"){
				return "String"
			}
			
			
			switch(we.attribute){
				case "text" : return "String"
				case "href" : return "String"
				default : return "WebElement"
			}
		}
		
		return "ERROR";
	}
	
	def parseLigne(Action action){ 
		if( action.elem instanceof WebElement){
			if(action.command.equals("exist")){
				return parseExist(action.elem);
			}
			else if(action.command.equals("equals")) {
				return parseEquals(action.elem, action.param);
			}
			else {
				return createWebElement(action.elem as WebElement)+"\n"+
				parseCommand(action.command, action.param,(action.elem as WebElement).type+variableIt);
			}
		}
		
		if(action.elem instanceof VariableRef)
			return  (action.elem as VariableRef).ref.name;
			
		if(action.elem instanceof GlobalElement)
			return "driver"+parseCommand(action.command, action.param,"");
	}
	
	
	def parseExist(Element elem)'''
		«IF elem instanceof WebElement»
			«elem.createWebElement»
			Assert.assertNotNull(«elem.type+variableIt»);
			
		«ENDIF»
	'''
	
	def parseEquals(Element elem, Parameter param)'''
		«IF elem instanceof WebElement»
			«elem.createWebElement»
			Assert.assertTrue(«elem.type+variableIt».contains(«(param as VariableRef).ref.name»));
			
		«ENDIF»
	'''
	
	def parseCommand(String command,Parameter param,String nomElem){
		
	    switch command {	
      		case 'click'	: '''«nomElem».click();'''
      		case 'goTo' 	: '''.get(«param.parseParameter»);
if(!cookiesAlreadyChecked) {
	new WebDriverWait(driver, 20).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@class='agree-button eu-cookie-compliance-default-button']"))).click(); //ACCEPT COOKIE
	cookiesAlreadyChecked = true;
}

''' 
      		case 'write' 	: '''«nomElem».sendKeys(«param.parseParameter»);''' 
      		case 'select' 	: '''«nomElem».click();''' 
      		case 'check' 	: '''if ( !«nomElem».isSelected() ){«nomElem».click();}''' 
      		case 'uncheck' 	: '''
			for(WebElement checkBox:«nomElem»){
			if(checkBox.isSelected()) checkBox.click(); 
			}
        	''' 
      		case 'parent'  	: "TODO"
      		default : ""
   		 }
    }
    
    def parseParameter(Parameter param){
    	if(param instanceof WebElement){
    		return createWebElement(param)+"\n";
    	}

		if(param instanceof VariableRef){
			return param.getRef().getName();
		}
	
		return "\""+param.param+"\"";
    }
    
    def createWebElement(WebElement we){
    	variableIt++;
    	
    	if(we.type == "title"){
    		return "String title"+variableIt+" = driver.getTitle();";
    	}
    	if(we.type == "checkbox" && we.selector.property == "*"){
    		return 
			"List<WebElement> checkbox"+variableIt+" = driver.findElements(By.xpath(\"//input[@type='checkbox']\"));"
    	}
    
    	return "WebElement "+we.type+variableIt+" = "+findWebElement(we);
   	}
   	
   	 def findWebElement(WebElement we){	
   	 		
   		return "driver.findElements("+parseWebElementSelector(we.selector, we.type)+").get("+we.index+")"+parseAttribute(we.attribute);
   	}
   	
   	def parseWebElementSelector(Selector selector, String elementType){
   		
   		var type = getWebElementHtmlType(elementType);
   		
		if( selector instanceof Attributes) {	
	   	   		
			for(Attribute att: selector.getAttrs()){
				if(elementType == "link" && att.getAttType != "href"){
					return "By.partialLinkText(\""+parseAttributeValue(att.value)+"\")"
				}
				if(elementType == "parentLink"){
					return "By.xpath(\"//*"+getHtmlAttributeType(att.getAttType)+parseAttributeValue(att.value)+"']/parent::a\")"
				}

				if(att.getAttType.equals("class")){
					return "By.className(\""+parseAttributeValue(att.value)+"\")"
				}
				if(att.getAttType.equals("content")){
					return "By.xpath(\"//"+type+getHtmlAttributeType(att.getAttType)+parseAttributeValue(att.value)+"')]\")";
				}
				
				
				
				return "By.xpath(\"//"+type+getHtmlAttributeType(att.getAttType)+parseAttributeValue(att.value)+"']\")";
			}
			
			return "todo plusieurs attributs";
		}
		else{
			return "By.tagName(\""+type+"\")"
		}
   	}
   	

   	
   	def parseAttributeValue(AttributeValue attV){
   		if(attV.^val === null){
		   	return (attV as StringValue).ref;
		}
   		else{
   			return "\" + "+ attV.^val.ref.name +"+\""
   		}
   	}
   	
   	def getHtmlAttributeType(String type){
   		switch type {
			case "content" : return "[contains(text(),'"
			case "alt" : return "[@alt='"
			case "label" : return "[text()='"
			case "id" : return "[@id='"
			case "value" : return "[@value='"
			case "class" : return "[@class='"
			case "href" : return "[@href='"
			default : ""
		}
   	}
   	
   	def getWebElementHtmlType(String type){
   		switch type {
   			case "link": return "a"
   			case "field" : return "input"
   			case "button" : return "button"
   			case "image" : return "img"
   			case "combobox" : return "li"
   			default: return "*"
   		}
   	}
   	
   	def parseAttribute(String attribute){
   		switch attribute {
			case "text" : return ".getText();"
			case "href" : return ".getAttribute(\"pathname\");"
			default : ";"
		}
   	}
	
	def static String FirstUpperCase(String str) {
    	return  str.substring(0, 1).toUpperCase() + str.substring(1);
  	}
}
